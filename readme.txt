Общий workflow:
0. Предполагается, что dataset.zip находится в корне папки проекта.
1. Для распаковки dataset.zip необходимо запустить скрипт в bash ./extract_dataset.sh
2. Для сборки проекта необходимо запустить скрипт в bash ./preinstall.sh
3. Далее для построения индекса нужно запустить в bash ./index.sh
Оптимизированный индекс, словарь и информация об url-ях сохраняются в папке ./build/src
4. Для тестирования поиска необходимо запустить в bash ./search.sh,
либо можно создать файл с запросами, например requests.txt, и подать на вход скрипту: ./search.sh < requests.txt
После каждого ввода запроса выводится результат.

Описание решения:
0. ./src/main_indexer.cpp - содержит этапы построения индекса: обработка файлов, построение прямого индекса,
построение обратного индекса, оптимизация обратного индекса (varbyte), построение словаря.
2. ./src/main_searcher.cpp - реализует поиск согласно требованиям: 
пользователь вводит синтаксически корректный запрос + enter -> результат.
Для завершения можно нажать просто enter.
2. Для сжатия обратного индекса реализован алгоритм varbyte: ./include/codec.hpp
3. Реализован разбор запроса: парсинг, определение приоритета и порядка операций, дерево строится от меньшего приоритета 
(в корне операция с наименьшим приоритетом): query_tree::build_tree().
4. Реализована потоковая обработка дерева запроса: query_tree::get_urls (./src/query_tree.cpp, ./include/query_tree.hpp).

